services:
  mysql:
    container_name: mysql
    image: docker.io/library/mysql:latest
    environment:
      MYSQL_ROOT_PASSWORD: test
      MYSQL_DATABASE: customer_db
      MYSQL_USER: my_user
      MYSQL_PASSWORD: test
    ports:
      - 3306:3306
    volumes:
      - mysql_data:/var/lib/mysql
    networks:
      - common
    healthcheck:
      test: [ "CMD", "mysqladmin", "ping", "-h", "localhost" ]
      interval: 30s
      timeout: 10s
      retries: 5

  postgresql:
    container_name: postgresql
    image: docker.io/library/postgres:latest
    environment:
      POSTGRES_DB: product_db
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: test
    volumes:
      - postgres_data:/var/lib/postgresql/data
    ports:
      - 5432:5432
    networks:
      - common
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 30s
      timeout: 10s
      retries: 5

  mongo:
    image: mongo
    container_name: mongo
    ports:
      - 27017:27017
    volumes:
      - mongo_data:/data/db
    networks:
       - common

  configserver:
    container_name: configserver
    image: "localhost/configserver"
    ports:
      - 8001:8001
    networks:
      - common
    environment:
      - EUREKA_CLIENT_SERVICEURL_DEFAULTZONE=http://eureka:8888/eureka/
      - SPRING_CLOUD_CONFIG_URI=http://configserver:8001
      - SPRING_CLOUD_CONFIG_PROFILE=dev
      - SPRING_CLOUD_CONFIG_LABEL=main
    depends_on:
      - mysql
      - postgresql
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8001/actuator/health"]
      interval: 5s
      timeout: 10s
      retries: 10

  eureka:
    container_name: eureka
    image: "localhost/eureka"
    ports:
      - 8888:8888
    environment:
      - EUREKA_INSTANCE_HOSTNAME=eureka
      - SPRING_CLOUD_CONFIG_URI=http://configserver:8001
      - SPRING_CLOUD_CONFIG_PROFILE=dev
      - SPRING_CLOUD_CONFIG_LABEL=main
    networks:
      - common
    depends_on:
      configserver:
        condition: service_healthy
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:8888/actuator/health" ]
      interval: 5s
      timeout: 10s
      retries: 5

  gateway:
    container_name: gateway
    image: "localhost/gateway"
    ports:
      - 8090:8090
    networks:
      - common
    environment:
      - EUREKA_URL = http://eureka:8888
      - EUREKA_INSTANCE_HOSTNAME=gateway
      - EUREKA_CLIENT_SERVICEURL_DEFAULTZONE=http://eureka:8888/eureka/
      - SPRING_CLOUD_CONFIG_URI=http://configserver:8001
      - SPRING_CLOUD_CONFIG_PROFILE=dev
      - SPRING_CLOUD_CONFIG_LABEL=main
    depends_on:
      eureka:
        condition: service_healthy

  customerservice:
    container_name: customerservice
    image: "localhost/customerservice"
    ports:
      - 8081:8081
    networks:
      - common
    environment:
      - EUREKA_CLIENT_SERVICEURL_DEFAULTZONE=http://eureka:8888/eureka/
      - EUREKA_INSTANCE_HOSTNAME=customerservice
      - SPRING_CLOUD_CONFIG_URI=http://configserver:8001
      - SPRING_CLOUD_CONFIG_PROFILE=dev
      - SPRING_CLOUD_CONFIG_LABEL=main
    depends_on:
      eureka:
        condition: service_healthy

  productservice:
    container_name: productservice
    image: "localhost/productservice"
    ports:
      - 8080:8080
    networks:
      - common
    environment:
      - EUREKA_CLIENT_SERVICEURL_DEFAULTZONE=http://eureka:8888/eureka/
      - EUREKA_INSTANCE_HOSTNAME=productservice
      - SPRING_CLOUD_CONFIG_URI=http://configserver:8001
      - SPRING_CLOUD_CONFIG_PROFILE=dev
      - SPRING_CLOUD_CONFIG_LABEL=main
    depends_on:
      eureka:
        condition: service_healthy

  zookeeper:
    image: confluentinc/cp-zookeeper:7.4.1
    hostname: zookeeper
    container_name: zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000

  kafka:
    image: confluentinc/cp-kafka:7.4.1
    hostname: kafka
    container_name: kafka
    depends_on:
      - zookeeper
    ports:
      - "9092:9092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://localhost:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_LOG_RETENTION_HOURS: 168

networks:
  common:
    driver: bridge
volumes:
  mysql_data:
  postgres_data:
  mongo_data:
